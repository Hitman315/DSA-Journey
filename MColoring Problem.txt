public:
    bool isSafe(int node,bool graph[101][101],int color[],int n,int i){
        for(int k=0;k<n;k++){
            if(k!=node && graph[k][node]==1 && color[k]==i)
            return false;
        }
        return true;
    }
    bool solve(int color[],bool graph[101][101],int m,int n,int node){
        if(node==n){
            return true;
        }
        
        for(int i=1;i<=m;i++){
            if(isSafe(node,graph,color,n,i)){
                color[node]=i;
                if(solve(color,graph,m,n,node+1))
                return true;
                color[node]=0;
            }
        }
        return false;
    }
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        int color[n]={0};
        if(solve(color,graph,m,n,0))
        return true;
        
        return false;
    }
};