
class Solution{
    public:
        void prepadj(vector<vector<int>> &edges,unordered_map<int,list<int>>&adj,vector<int>&inorder){
            for(int i=0;i<edges.size();i++){
                int u=edges[i][0];
                int v=edges[i][1];
                
                adj[u].push_back(v);
                inorder[v]++;
                
            }
        }
        void bfs(unordered_map<int,list<int>> adj,vector<int>&inorder,vector<int>&ans){
            queue<int>q;
            for(int i=1;i<=inorder.size();i++){
                if(inorder[i]==0){
                    q.push(i);
                    ans[i]=1;
                }
            }
            
            while(!q.empty()){
                int front=q.front();
                q.pop();
                
                for(auto it:adj[front]){
                    inorder[it]--;
                    if(inorder[it]==0){
                        q.push(it);
                        //Since node will be parent so we will enter it in ans by increasing by 1
                        ans[it]=ans[front]+1;
                    }
                }
            }
        }
        vector<int> minimumTime(int n,vector<vector<int>> &edges,int m)
        {
            // code here
            unordered_map<int,list<int>> adj;
            vector<int>inorder(n+1,0);
            prepadj(edges,adj,inorder);
            vector<int>ans(n+1,0);
            bfs(adj,inorder,ans);
            vector<int>final;
            for(int i=1;i<ans.size();i++){
                final.push_back(ans[i]);
            }
            return final;
        }
};