struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    static bool cmp(Job a ,Job b){
        return a.profit>b.profit;
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        sort(arr,arr+n,cmp);
        int maxdead=arr[0].dead;
        for(int i=0;i<n;i++){
            if(arr[i].dead>maxdead){
                maxdead=arr[i].dead;
            }
        }
        int a[maxdead+1];
        for(int i=0;i<=maxdead;i++){
            a[i]=-1;
        }
        int max_profit=0;
        int jobcount=0;
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--){
                if(a[j]==-1){
                    a[j]=i;
                    jobcount++;
                    max_profit+=arr[i].profit;
                    break;
                }
            }
        }
        
        vector<int>v;
        v.push_back(jobcount);
        v.push_back(max_profit);
        return v;
    } 
};