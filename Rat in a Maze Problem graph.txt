
class Solution{
    public:
    bool isSafe(vector<vector<int>> &m, int n,vector<vector<int>>&visited,int row,int col){
        if(row>=0 && row<n && col>=0 && col<n && m[row][col]==1 && visited[row][col]==0){
            return true;
        }
        return false;
    }
    void solve(vector<vector<int>> &m, int n,vector<vector<int>>&visited,vector<string>&ans
    ,string path,int row,int col){
        if(row==n-1 && col==n-1){
            ans.push_back(path);
            return;
        }
        
        visited[row][col]=1;
        //UP
        int newrow=row-1;
        int newcol=col;
        if(isSafe(m,n,visited,newrow,newcol)){
            path.push_back('U');
            solve(m,n,visited,ans,path,newrow,newcol);
            path.pop_back();
        }
        //Down
        newrow=row+1;
        newcol=col;
        if(isSafe(m,n,visited,newrow,newcol)){
            path.push_back('D');
            solve(m,n,visited,ans,path,newrow,newcol);
            path.pop_back();
        }
        //Right
        newrow=row;
        newcol=col+1;
        if(isSafe(m,n,visited,newrow,newcol)){
            path.push_back('R');
            solve(m,n,visited,ans,path,newrow,newcol);
            path.pop_back();
        }
        //Left
        newrow=row;
        newcol=col-1;
        if(isSafe(m,n,visited,newrow,newcol)){
            path.push_back('L');
            solve(m,n,visited,ans,path,newrow,newcol);
            path.pop_back();
        }
        visited[row][col]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string>ans;
        if(m[0][0]==0)
        return ans;
        vector<vector<int>>visited=m;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                visited[i][j]=0;
            }
        }
        string path="";
        int row=0;
        int col=0;
        solve(m,n,visited,ans,path,row,col);
        return ans;
    }
};

    
