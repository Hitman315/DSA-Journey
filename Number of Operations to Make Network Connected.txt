class Solution {
public:
    void prepadj(unordered_map<int,list<int>>&adj,vector<vector<int>>& connections){
        for(int i=0;i<connections.size();i++){
            int u=connections[i][0];
            int v=connections[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    }

    void dfs(unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj,int node){
        visited[node]=true;
        for(auto it:adj[node]){
            if(!visited[it]){
               
                dfs(visited,adj,it);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n - 1)
            return -1;
        unordered_map<int,list<int>>adj;
        prepadj(adj,connections);

        unordered_map<int,bool>visited;
        int ans=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(visited,adj,i);
                ans++;
            }
        }
        return ans-1;
    }
};