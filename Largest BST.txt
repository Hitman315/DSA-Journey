
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class info{
    public:
    int maxi;
    int mini;
    bool isbst;
    int size;
};
class Solution{
    public:
    info findlarbst(Node* root,int &maxsize){
        if(root==NULL)
        return {INT_MIN,INT_MAX,true,0};
        
        info left=findlarbst(root->left,maxsize);
        info right=findlarbst(root->right,maxsize);
        
        info curr;
        curr.maxi=max(root->data,right.maxi);
        curr.mini=min(root->data,left.mini);
        curr.size=left.size+right.size+1;
        
        if(left.isbst && right.isbst && (root->data>left.maxi && root->data <right.mini)){
            curr.isbst=true;
        }else
        curr.isbst=false;
        
        if(curr.isbst)
        maxsize=max(maxsize,curr.size);
        
        return curr;
    }
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	//Your code here
    	int maxsize=0;
    	info temp=findlarbst(root,maxsize);
    	return maxsize;
    }
};