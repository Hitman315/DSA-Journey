
class Solution{
public:
    void solveAns(vector<vector<int>> &ans,vector<vector<int>> &v,int n){
        vector<int>temp;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(ans[i][j]==1){
                    temp.push_back(j+1);
                }
            }
        }
        v.push_back(temp);
    }
    
    bool isSafe(int row,int col,vector<vector<int>> &ans,int n){
        //For horizontal 
        int x=row;
        int y=col;
        
        while(y>=0){
            if(ans[x][y]==1)
            return false;
            y--;
        }
        
        //For upward diagonal 
        x=row;
        y=col;
        while(x>=0 && y>=0){
            if(ans[x][y]==1)
            return false;
            x--;
            y--;
        }
        
        //For downward diagonal
        x=row;
        y=col;
        while(x<n && y>=0){
            if(ans[x][y]==1)
            return false;
            x++;
            y--;
        }
        
        return true;
    }
    
    void solve(int col,int n,vector<vector<int>> &ans,vector<vector<int>>&v){
        if(col==n){
            solveAns(ans,v,n);
            return ;
        }
        
        for(int row=0;row<n;row++){
            if(isSafe(row,col,ans,n)){
                ans[row][col]=1;
                solve(col+1,n,ans,v);
                ans[row][col]=0;
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        // code here
    /*
    We create a 2D vector containing "n"
    elements each having the value "vector<int> (m, 0)".
    "vector<int> (m, 0)" means a vector having "m"
    elements each of value "0".
    Here these elements are vectors.
    */
        vector<vector<int>> ans(n,vector<int>(n,0));
        vector<vector<int>> v;
        int col=0;
        solve(col,n,ans,v);
        sort(v.begin(),v.end());
        return v;
    }
};