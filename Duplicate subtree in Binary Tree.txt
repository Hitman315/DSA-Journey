struct Node
{
  char data;
  struct Node* left;
  struct Node* right;
};*/

class Solution {
  public:
  unordered_map<string,int>mp;
  string solve(Node *root){
      
      if(!root)
      return "$";
      string s="";
      
      if(!root->right && !root->left){
      s=to_string(root->data);
      return s;
      }
      
      s=s+"$"+to_string(root->data);
      s=s+"$"+solve(root->left);
      s=s+"$"+solve(root->right);
      mp[s]++;
      return s;
  }
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    int dupSub(Node *root) {
         // code here
         mp.clear();
         solve(root);
         for(auto it:mp){
             if(it.second>=2) return 1;
         }
         return 0;
    }
};